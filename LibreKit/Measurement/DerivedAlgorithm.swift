//
//  DerivedAlgorithm.swift
//  LibreKit
//
//  THIS FILE CONTAINS MOST OPERATIONS TO CALCULATE GLUCOSE VALUES
//
//  Created by Julian Groen on 16/08/2021.
//  Copyright Â© 2021 Julian Groen. All rights reserved.
//

import Foundation


public struct SensorCalibration: Equatable, Codable {
    
    public var i1: Int
    
    public var i2: Int
    
    public var i3: Double
    
    public var i4: Double
    
    public var i5: Double
    
    public var i6: Double
}

extension SensorCalibration {
    
    public static let t1 = [0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3]
    
    public static let t2 = [0.037744199999999999, 0.037744199999999999, 0.037744199999999999, 0.037744199999999999, 0.037744199999999999, 0.037744199999999999, 0.037744199999999999, 0.037744199999999999, 0.038121700000000001, 0.038121700000000001, 0.038121700000000001, 0.038121700000000001, 0.038121700000000001, 0.038121700000000001, 0.038121700000000001, 0.038121700000000001, 0.0385029, 0.0385029, 0.0385029, 0.0385029, 0.0385029, 0.0385029, 0.0385029, 0.0385029, 0.038887900000000003, 0.038887900000000003, 0.038887900000000003, 0.038887900000000003, 0.038887900000000003, 0.038887900000000003, 0.038887900000000003, 0.038887900000000003, 0.039276800000000001, 0.039276800000000001, 0.039276800000000001, 0.039276800000000001, 0.039276800000000001, 0.039276800000000001, 0.039276800000000001, 0.039276800000000001, 0.039669599999999999, 0.039669599999999999, 0.039669599999999999, 0.039669599999999999, 0.039669599999999999, 0.039669599999999999, 0.039669599999999999, 0.039669599999999999, 0.040066299999999999, 0.040066299999999999, 0.040066299999999999, 0.040066299999999999, 0.040066299999999999, 0.040066299999999999, 0.040066299999999999, 0.040066299999999999, 0.0404669, 0.0404669, 0.0404669, 0.0404669, 0.0404669, 0.0404669, 0.0404669, 0.0404669, 0.040871600000000001, 0.040871600000000001, 0.040871600000000001, 0.040871600000000001, 0.040871600000000001, 0.040871600000000001, 0.040871600000000001, 0.040871600000000001, 0.041280299999999999, 0.041280299999999999, 0.041280299999999999, 0.041280299999999999, 0.041280299999999999, 0.041280299999999999, 0.041280299999999999, 0.041280299999999999, 0.041693099999999997, 0.041693099999999997, 0.041693099999999997, 0.041693099999999997, 0.041693099999999997, 0.041693099999999997, 0.041693099999999997, 0.041693099999999997, 0.042110000000000002, 0.042110000000000002, 0.042110000000000002, 0.042110000000000002, 0.042110000000000002, 0.042110000000000002, 0.042110000000000002, 0.042110000000000002, 0.042531100000000002, 0.042531100000000002, 0.042531100000000002, 0.042531100000000002, 0.042531100000000002, 0.042531100000000002, 0.042531100000000002, 0.042531100000000002, 0.042956500000000002, 0.042956500000000002, 0.042956500000000002, 0.042956500000000002, 0.042956500000000002, 0.042956500000000002, 0.042956500000000002, 0.042956500000000002, 0.043386000000000001, 0.043386000000000001, 0.043386000000000001, 0.043386000000000001, 0.043386000000000001, 0.043386000000000001, 0.043386000000000001, 0.043386000000000001, 0.043819900000000002, 0.043819900000000002, 0.043819900000000002, 0.043819900000000002, 0.043819900000000002, 0.043819900000000002, 0.043819900000000002, 0.043819900000000002, 0.044258100000000002, 0.044258100000000002, 0.044258100000000002, 0.044258100000000002, 0.044258100000000002, 0.044258100000000002, 0.044258100000000002, 0.044258100000000002, 0.044700700000000003, 0.044700700000000003, 0.044700700000000003, 0.044700700000000003, 0.044700700000000003, 0.044700700000000003, 0.044700700000000003, 0.044700700000000003, 0.045147699999999999, 0.045147699999999999, 0.045147699999999999, 0.045147699999999999, 0.045147699999999999, 0.045147699999999999, 0.045147699999999999, 0.045147699999999999, 0.045599099999999997, 0.045599099999999997, 0.045599099999999997, 0.045599099999999997, 0.045599099999999997, 0.045599099999999997, 0.045599099999999997, 0.045599099999999997, 0.046055100000000002, 0.046055100000000002, 0.046055100000000002, 0.046055100000000002, 0.046055100000000002, 0.046055100000000002, 0.046055100000000002, 0.046055100000000002, 0.0465157, 0.0465157, 0.0465157, 0.0465157, 0.0465157, 0.0465157, 0.0465157, 0.0465157, 0.046980800000000003, 0.046980800000000003, 0.046980800000000003, 0.046980800000000003, 0.046980800000000003, 0.046980800000000003, 0.046980800000000003, 0.046980800000000003, 0.047450600000000002, 0.047450600000000002, 0.047450600000000002, 0.047450600000000002, 0.047450600000000002, 0.047450600000000002, 0.047450600000000002, 0.047450600000000002, 0.047925200000000001, 0.047925200000000001, 0.047925200000000001, 0.047925200000000001, 0.047925200000000001, 0.047925200000000001, 0.047925200000000001, 0.047925200000000001, 0.0484044, 0.0484044, 0.0484044, 0.0484044, 0.0484044, 0.0484044, 0.0484044, 0.0484044, 0.048888399999999999, 0.048888399999999999, 0.048888399999999999, 0.048888399999999999, 0.048888399999999999, 0.048888399999999999, 0.048888399999999999, 0.048888399999999999, 0.049377299999999999, 0.049377299999999999, 0.049377299999999999, 0.049377299999999999, 0.049377299999999999, 0.049377299999999999, 0.049377299999999999, 0.049377299999999999, 0.049871100000000002, 0.049871100000000002, 0.049871100000000002, 0.049871100000000002, 0.049871100000000002, 0.049871100000000002, 0.049871100000000002, 0.049871100000000002, 0.050369799999999999, 0.050369799999999999, 0.050369799999999999, 0.050369799999999999, 0.050369799999999999, 0.050369799999999999, 0.050369799999999999, 0.050369799999999999, 0.050873500000000002, 0.050873500000000002, 0.050873500000000002, 0.050873500000000002, 0.050873500000000002, 0.050873500000000002, 0.050873500000000002, 0.050873500000000002, 0.051382299999999999, 0.051382299999999999, 0.051382299999999999, 0.051382299999999999, 0.051382299999999999, 0.051382299999999999, 0.051382299999999999, 0.051382299999999999, 0.051896100000000001, 0.051896100000000001, 0.051896100000000001, 0.051896100000000001, 0.051896100000000001, 0.051896100000000001, 0.051896100000000001, 0.051896100000000001, 0.052415000000000003, 0.052415000000000003, 0.052415000000000003, 0.052415000000000003, 0.052415000000000003, 0.052415000000000003, 0.052415000000000003, 0.052415000000000003, 0.052939199999999999, 0.052939199999999999, 0.052939199999999999, 0.052939199999999999, 0.052939199999999999, 0.052939199999999999, 0.052939199999999999, 0.052939199999999999, 0.053468599999999998, 0.053468599999999998, 0.053468599999999998, 0.053468599999999998, 0.053468599999999998, 0.053468599999999998, 0.053468599999999998, 0.053468599999999998, 0.054003299999999997, 0.054003299999999997, 0.054003299999999997, 0.054003299999999997, 0.054003299999999997, 0.054003299999999997, 0.054003299999999997, 0.054003299999999997, 0.054543300000000003, 0.054543300000000003, 0.054543300000000003, 0.054543300000000003, 0.054543300000000003, 0.054543300000000003, 0.054543300000000003, 0.054543300000000003, 0.055088699999999997, 0.055088699999999997, 0.055088699999999997, 0.055088699999999997, 0.055088699999999997, 0.055088699999999997, 0.055088699999999997, 0.055088699999999997, 0.055639599999999997, 0.055639599999999997, 0.055639599999999997, 0.055639599999999997, 0.055639599999999997, 0.055639599999999997, 0.055639599999999997, 0.055639599999999997, 0.056196000000000003, 0.056196000000000003, 0.056196000000000003, 0.056196000000000003, 0.056196000000000003, 0.056196000000000003, 0.056196000000000003, 0.056196000000000003, 0.056758000000000003, 0.056758000000000003, 0.056758000000000003, 0.056758000000000003, 0.056758000000000003, 0.056758000000000003, 0.056758000000000003, 0.056758000000000003, 0.057325599999999997, 0.057325599999999997, 0.057325599999999997, 0.057325599999999997, 0.057325599999999997, 0.057325599999999997, 0.057325599999999997, 0.057325599999999997, 0.0578988, 0.0578988, 0.0578988, 0.0578988, 0.0578988, 0.0578988, 0.0578988, 0.0578988, 0.058477800000000003, 0.058477800000000003, 0.058477800000000003, 0.058477800000000003, 0.058477800000000003, 0.058477800000000003, 0.058477800000000003, 0.058477800000000003, 0.0590626, 0.0590626, 0.0590626, 0.0590626, 0.0590626, 0.0590626, 0.0590626, 0.0590626, 0.059653200000000003, 0.059653200000000003, 0.059653200000000003, 0.059653200000000003, 0.059653200000000003, 0.059653200000000003, 0.059653200000000003, 0.059653200000000003, 0.060249700000000003, 0.060249700000000003, 0.060249700000000003, 0.060249700000000003, 0.060249700000000003, 0.060249700000000003, 0.060249700000000003, 0.060249700000000003, 0.060852200000000002, 0.060852200000000002, 0.060852200000000002, 0.060852200000000002, 0.060852200000000002, 0.060852200000000002, 0.060852200000000002, 0.060852200000000002, 0.0614607, 0.0614607, 0.0614607, 0.0614607, 0.0614607, 0.0614607, 0.0614607, 0.0614607, 0.062075400000000003, 0.062075400000000003, 0.062075400000000003, 0.062075400000000003, 0.062075400000000003, 0.062075400000000003, 0.062075400000000003, 0.062075400000000003, 0.062696100000000005, 0.062696100000000005, 0.062696100000000005, 0.062696100000000005, 0.062696100000000005, 0.062696100000000005, 0.062696100000000005, 0.062696100000000005, 0.063323099999999993, 0.063323099999999993, 0.063323099999999993, 0.063323099999999993, 0.063323099999999993, 0.063323099999999993, 0.063323099999999993, 0.063323099999999993, 0.063956299999999994, 0.063956299999999994, 0.063956299999999994, 0.063956299999999994, 0.063956299999999994, 0.063956299999999994, 0.063956299999999994, 0.063956299999999994, 0.064595899999999998, 0.064595899999999998, 0.064595899999999998, 0.064595899999999998, 0.064595899999999998, 0.064595899999999998, 0.064595899999999998, 0.064595899999999998, 0.065241800000000003, 0.065241800000000003, 0.065241800000000003, 0.065241800000000003, 0.065241800000000003, 0.065241800000000003, 0.065241800000000003, 0.065241800000000003, 0.0658942, 0.0658942, 0.0658942, 0.0658942, 0.0658942, 0.0658942, 0.0658942, 0.0658942, 0.066553200000000007, 0.066553200000000007, 0.066553200000000007, 0.066553200000000007, 0.066553200000000007, 0.066553200000000007, 0.066553200000000007, 0.066553200000000007, 0.067218700000000006, 0.067218700000000006, 0.067218700000000006, 0.067218700000000006, 0.067218700000000006, 0.067218700000000006, 0.067218700000000006, 0.067218700000000006, 0.067890900000000004, 0.067890900000000004, 0.067890900000000004, 0.067890900000000004, 0.067890900000000004, 0.067890900000000004, 0.067890900000000004, 0.067890900000000004, 0.0685698, 0.0685698, 0.0685698, 0.0685698, 0.0685698, 0.0685698, 0.0685698, 0.0685698, 0.069255499999999998, 0.069255499999999998, 0.069255499999999998, 0.069255499999999998, 0.069255499999999998, 0.069255499999999998, 0.069255499999999998, 0.069255499999999998, 0.069948099999999999, 0.069948099999999999, 0.069948099999999999, 0.069948099999999999, 0.069948099999999999, 0.069948099999999999, 0.069948099999999999, 0.069948099999999999, 0.070647500000000002, 0.070647500000000002, 0.070647500000000002, 0.070647500000000002, 0.070647500000000002, 0.070647500000000002, 0.070647500000000002, 0.070647500000000002, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.071354000000000001, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072067599999999996, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.072788199999999997, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.073516100000000001, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074251300000000006, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.074993799999999999, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.075743699999999997, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.076501200000000005, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.077266199999999993, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078038800000000005, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.078819200000000006, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.079607399999999995, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.080403500000000003, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.081207500000000002, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082019599999999998, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.082839800000000005, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.083668199999999998, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.084504899999999994, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.085349900000000006, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.086203399999999999, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087065500000000004, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.087936100000000003, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.088815500000000006, 0.089703599999999994, 0.089703599999999994, 0.089703599999999994, 0.089703599999999994, 0.089703599999999994, 0.089703599999999994, 0.089703599999999994, 0.089703599999999994, 0.090600700000000006, 0.090600700000000006, 0.090600700000000006, 0.090600700000000006, 0.090600700000000006, 0.090600700000000006, 0.090600700000000006, 0.090600700000000006, 0.091506699999999996, 0.091506699999999996, 0.091506699999999996, 0.091506699999999996, 0.091506699999999996, 0.091506699999999996, 0.091506699999999996, 0.091506699999999996, 0.092421699999999996, 0.092421699999999996, 0.092421699999999996, 0.092421699999999996, 0.092421699999999996, 0.092421699999999996, 0.092421699999999996, 0.092421699999999996, 0.093345999999999998, 0.093345999999999998, 0.093345999999999998, 0.093345999999999998, 0.093345999999999998, 0.093345999999999998, 0.093345999999999998, 0.093345999999999998, 0.094279399999999999, 0.094279399999999999, 0.094279399999999999, 0.094279399999999999, 0.094279399999999999, 0.094279399999999999, 0.094279399999999999, 0.094279399999999999, 0.095222200000000007, 0.095222200000000007, 0.095222200000000007, 0.095222200000000007, 0.095222200000000007, 0.095222200000000007, 0.095222200000000007, 0.095222200000000007, 0.096174399999999993, 0.096174399999999993, 0.096174399999999993, 0.096174399999999993, 0.096174399999999993, 0.096174399999999993, 0.096174399999999993, 0.096174399999999993, 0.097136200000000006, 0.097136200000000006, 0.097136200000000006, 0.097136200000000006, 0.097136200000000006, 0.097136200000000006, 0.097136200000000006, 0.097136200000000006, 0.0981075, 0.0981075, 0.0981075, 0.0981075, 0.0981075, 0.0981075, 0.0981075, 0.0981075, 0.099088599999999999, 0.099088599999999999, 0.099088599999999999, 0.099088599999999999, 0.099088599999999999, 0.099088599999999999, 0.099088599999999999, 0.099088599999999999, 0.1000795, 0.1000795, 0.1000795, 0.1000795, 0.1000795, 0.1000795, 0.1000795, 0.1000795, 0.1010803, 0.1010803, 0.1010803, 0.1010803, 0.1010803, 0.1010803, 0.1010803, 0.1010803, 0.1020911, 0.1020911, 0.1020911, 0.1020911, 0.1020911, 0.1020911, 0.1020911, 0.1020911, 0.103112, 0.103112, 0.103112, 0.103112, 0.103112, 0.103112, 0.103112, 0.103112, 0.1041431, 0.1041431, 0.1041431, 0.1041431, 0.1041431, 0.1041431, 0.1041431, 0.1041431, 0.1051846, 0.1051846, 0.1051846, 0.1051846, 0.1051846, 0.1051846, 0.1051846, 0.1051846, 0.10623639999999999, 0.10623639999999999, 0.10623639999999999, 0.10623639999999999, 0.10623639999999999, 0.10623639999999999, 0.10623639999999999, 0.10623639999999999, 0.1072988, 0.1072988, 0.1072988, 0.1072988, 0.1072988, 0.1072988, 0.1072988, 0.1072988, 0.1083718, 0.1083718, 0.1083718, 0.1083718, 0.1083718, 0.1083718, 0.1083718, 0.1083718, 0.1094555, 0.1094555, 0.1094555, 0.1094555, 0.1094555, 0.1094555, 0.1094555, 0.1094555, 0.11055, 0.11055, 0.11055, 0.11055, 0.11055, 0.11055, 0.11055, 0.11055, 0.1116555, 0.1116555, 0.1116555, 0.1116555, 0.1116555, 0.1116555, 0.1116555, 0.1116555, 0.1127721, 0.1127721, 0.1127721, 0.1127721, 0.1127721, 0.1127721, 0.1127721, 0.1127721, 0.1138998, 0.1138998, 0.1138998, 0.1138998, 0.1138998, 0.1138998, 0.1138998, 0.1138998, 0.1150388, 0.1150388, 0.1150388, 0.1150388, 0.1150388, 0.1150388, 0.1150388, 0.1150388, 0.11618920000000001, 0.11618920000000001, 0.11618920000000001, 0.11618920000000001, 0.11618920000000001, 0.11618920000000001, 0.11618920000000001, 0.11618920000000001, 0.1173511, 0.1173511, 0.1173511, 0.1173511, 0.1173511, 0.1173511, 0.1173511, 0.1173511, 0.11852459999999999, 0.11852459999999999, 0.11852459999999999, 0.11852459999999999, 0.11852459999999999, 0.11852459999999999, 0.11852459999999999, 0.11852459999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.11970989999999999, 0.120907, 0.120907, 0.120907, 0.120907, 0.120907, 0.120907, 0.120907, 0.120907, 0.120907, 0.122116, 0.122116, 0.122116, 0.122116, 0.122116, 0.122116, 0.122116, 0.122116, 0.122116, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.12333719999999999, 0.1245706, 0.1245706, 0.1245706, 0.1245706, 0.1245706, 0.1245706, 0.1245706, 0.1245706, 0.1245706, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.12581629999999999, 0.1270744, 0.1270744, 0.1270744, 0.1270744, 0.1270744, 0.1270744, 0.1270744, 0.1270744, 0.1270744, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999, 0.12834519999999999]
}

public class SavitzkyGolay {
    
    static let filter_width_trend: Int = 3
    
    static let filter_width_history: Int = 4
    
    static let filter_width_repeats: Int = 5
    
    public static func smooth(measurements: inout [Measurement], iterations: Int) {
        for _ in 1...iterations { measurements.smoothen(width: filter_width_repeats) }
        smooth(&measurements, width: filter_width_trend, iterations: (iterations + 1))
    }
    
    public static func smooth(measurements: inout [Measurement]) {
        measurements.smoothen(width: filter_width_history)
    }
    
    private static func smooth(_ measurements: inout [Measurement], width filter_width: Int, iterations: Int) {
        guard measurements.count >= 16 else { return }
        let smoothed_values = measurements
        for index in 0 ..< measurements.count {
            var smoothable = [smoothed_values[index]]
            var smoothable_value_index = 0
            for count in 1...5 {
                let target_index = index - 5 * count
                if target_index >= 0 {
                    smoothable.insert(smoothed_values[target_index], at: 0)
                    smoothable_value_index = count
                }
            }
            for count in 1...5 {
                let target_index = index + 5 * count
                if target_index < smoothed_values.count - 1 {
                    smoothable.append(smoothed_values[target_index])
                }
            }
            for _ in 1...iterations { smoothable.smoothen(width: filter_width) }
            measurements[index].value = smoothable[smoothable_value_index].value
        }
    }
}

fileprivate let coefficients = [[-3.0, 12.0, 17.0, 12.0, -3.0], [-2.0, 3.0, 6.0, 7.0, 6.0, 3.0, -2.0], [-21.0, 14.0, 39.0, 54.0, 59.0, 54.0, 39.0, 14.0, -21.0], [-36.0, 9.0, 44.0, 69.0, 84.0, 89.0, 84.0, 69.0, 44.0, 9.0, -36.0]]

fileprivate extension Array where Element: AbstractMeasurement {
    
    mutating func smoothen(width filter_width: Int = 5) {
        var filter_width_use: Int = filter_width
        if filter_width > 5 || filter_width < 2 { filter_width_use = 5 }
        let coefficients_index: Int = filter_width_use - 2
        
        guard self.count >= filter_width_use else { return }
        
        var temporary: [AbstractMeasurement] = [AbstractMeasurement]()
        for element in self { temporary.append(element) }
        for _ in 0 ..< filter_width_use {
            temporary.insert(Placeholder(value: 0), at: 0)
            temporary.append(Placeholder(value: 0))
        }
        
        var indices: [AbstractMeasurement] = [AbstractMeasurement]()
        for index in 0 ..< self.count + (filter_width_use * 2) {
            indices.append(Placeholder(value: Double(index)))
        }
        
        let regression = { (predictor: Range<Int>, target: Range<Int>) in
            let linear_regression = linear_regression(indices[predictor], temporary[predictor])
            for index in target {
                temporary[index].value = linear_regression(indices[index].value)
            }
        }
        
        let temp_length = temporary.count
        regression(filter_width_use ..< filter_width_use * 2, 0 ..< filter_width_use)
        regression(temp_length - filter_width_use * 2 ..< temp_length - filter_width_use, temp_length - filter_width_use ..< temp_length)
        
        var filtered: [Double] = [Double]()
        let divider = coefficients[coefficients_index].reduce(0, { $0 + $1 })
        for _ in 0 ..< self.count {
            filtered.append(0.0)
            for (index, coefficient) in coefficients[coefficients_index].enumerated() {
                filtered[filtered.count - 1] = filtered[filtered.count - 1] + coefficient * temporary[index + filtered.count - 1].value
            }
            filtered[filtered.count - 1] = filtered[filtered.count - 1] / divider
        }
        
        for (index, _) in self.enumerated() { self[index].value = filtered[index] }
    }
}

fileprivate typealias AbstractSlice = ArraySlice<AbstractMeasurement>

fileprivate func linear_regression(_ xs: AbstractSlice, _ ys: AbstractSlice) -> (Double) -> Double {
    let slope = (average(multiply(ys, xs)) - average(xs) * average(ys)) / (average(multiply(xs, xs)) - pow(average(xs), 2))
    return { x in (average(ys) - slope * average(xs)) + slope * x }
}

fileprivate func multiply(_ a: AbstractSlice, _ b: AbstractSlice) -> AbstractSlice {
    return zip(a, b).map({ Placeholder(value: $0.value * $1.value) })[0 ..< a.count]
}

fileprivate func average(_ input: AbstractSlice) -> Double {
    return input.reduce(Placeholder(value: 0), { Placeholder(value: $0.value + $1.value) }).value / Double(input.count)
}

public struct AlgorithmParameters: Equatable, Codable {
    
    public var slope_slope: Double
    
    public var slope_offset: Double
    
    public var offset_slope: Double
    
    public var offset_offset: Double
    
    public var extra_slope : Double = 1
    
    public var extra_offset: Double = 0
    
    public init(bytes: Data) {
        let calibration = SensorFunctions.calibrate(bytes)
        let thresholds = (glucose_lower: 1000.0, temperature_lower: 6000.0, glucose_upper: 3000.0, temperature_upper: 9000.0)
        
        let b1 = Placeholder(glucose: thresholds.glucose_lower, temperature: thresholds.temperature_lower).calculate(calibration: calibration)
        let b2 = Placeholder(glucose: thresholds.glucose_upper, temperature: thresholds.temperature_lower).calculate(calibration: calibration)
        let slope1  = (b2 - b1) / (Double(thresholds.glucose_upper) - Double(thresholds.glucose_lower))
        let offset1 = b2 - (Double(thresholds.glucose_upper) * slope1)
        
        let f1 = Placeholder(glucose: thresholds.glucose_lower, temperature: thresholds.temperature_upper).calculate(calibration: calibration)
        let f2 = Placeholder(glucose: thresholds.glucose_upper, temperature: thresholds.temperature_upper).calculate(calibration: calibration)
        let slope2  = (f2 - f1) / (Double(thresholds.glucose_upper) - Double(thresholds.glucose_lower))
        let offset2 = f2 - (Double(thresholds.glucose_upper) * slope2)
        
        self.slope_slope   = (slope1 - slope2) / (Double(thresholds.temperature_lower) - Double(thresholds.temperature_upper))
        self.offset_slope  = (slope1 - (slope_slope * Double(thresholds.temperature_lower)))
        self.slope_offset  = (offset1 - offset2) / (Double(thresholds.temperature_lower) - Double(thresholds.temperature_upper))
        self.offset_offset = (offset2 - (slope_offset * Double(thresholds.temperature_upper)))
    }
}

extension AlgorithmParameters: CustomDebugStringConvertible {
    public var debugDescription: String {
        return [
            "### AlgorithmParameters",
            "* slopeslope: \(slope_slope)",
            "* slopeoffset: \(slope_offset)",
            "* offsetoffset: \(offset_offset)",
            "* offsetslope: \(offset_slope)",
            "* extraslope: \(extra_slope)",
            "* extraoffset: \(extra_offset)",
            ""
        ].joined(separator: "\n")
    }
}
